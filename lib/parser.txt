/*
 * State definition language
 */
{

}
start = (comment/functionProperty/property/directEvent/event/ignoreSpace)*

directEvent = whitespace from:name whitespace '->' whitespace to:name  terminator {
    return {type:'event', from: from, to:to, on: ''};
}

event  = whitespace from:name whitespace on:(propertyNameLiteral / propertyNameLookup ) whitespace '->' whitespace to:name  terminator {
    return {type:'event', from: from, to:to, on: on};
}

property = whitespace state:name whitespace property:(propertyNameLiteral / propertyNameLookup )  '=' whitespace value:value terminator {

   return {type:'property', state: state, property:property, value: value};
}

jsArg = v:[$a-zA-Z0-9_]+ {
    return v.join('');
}

nextArg = whitespace ',' whitespace arg:(jsArg) whitespace {
    return arg;
}

funcArg =  firstArg:(jsArg) restArgs:(nextArg)*  {
    var args = [];
    if(firstArg) {
        args.push(firstArg);

        if(restArgs) {
            args.push.apply(args, restArgs);
        }
    }
    return args;
}

funcArgs = whitespace '(' whitespace args:(funcArg)? whitespace ')' whitespace{

    return args;
}


functionProperty = whitespace state:name whitespace property:(propertyNameLiteral / propertyNameLookup ) argsNames:(funcArgs)?  functionBody: funcBlock terminator {
    return {type:'function', state: state, property:property, body: functionBody, argsNames:argsNames};
}


funcBlock = block

block = ( '{' statements: ( block / [^{}]+ )* '}' ) {
	function join(array, pre) {
		return array.reduce(function(prev, current) {
			if(current instanceof Array) {
				return join(current, prev);
			} else {
				return prev + current;
			}
		},pre);
	}


	return '{' + join(statements, '') + '}';
}


propertyNameLookup = '[' whitespace  property:(singleQuote/doubleQuote/valueNumber) whitespace  ']' whitespace {
	return property;
}

propertyNameLiteral = '.' whitespace property:name whitespace  {
	return property;
}

valueNumber = n:number {
   return parseFloat(n.join(''));
}
number = [0-9.]+

valueFalse = 'false' {
	return false;
}

valueTrue = 'true'  {
	return true;
}

// Must be either literal or string
valueLiteral = l:valuereq {
   return l.join('');  
}
valueString = v:(singleQuote / doubleQuote) {
	return v;
}
// valueObject = '{' '}'

name = nx:(valueNumber / valueLiteral / valueString) {
	return nx;
}
value = valueTrue / valueFalse / valueNumber  / valueLiteral / valueString  // valueObject
valuereq= [@a-zA-Z0-9\-_*]+

singleQuote= "'" x:[^']*"'" {
	return x.join('');
}

doubleQuote= '"' x:[^"]* '"' {
	return x.join('');
}

comment = whitespace '//' [^\n]* ('\n'/!.) {
    return {type:'comment'};
}

ignoreSpace = [ \t\n\r]+ {
    return {type:'space'};
}

terminator = [ \t\r]* ([;\n]/comment/!.) whitespace
whitespace = [ \t\n\r]*
